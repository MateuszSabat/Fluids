#pragma kernel CSMain

// bounds
    float4 bounds;   // Rect that bounds the fluid

// particles
    uint count;

    struct Particle {
        float2 pos;
    };
    Buffer<Particle> particles;

    float solidRadious;
    float maxRadious;

// texture
    float dpi;
    uint2 texSize;
    RWTexture2D<float4> tex;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= texSize.x || id.y >= texSize.y)
        return;

    float x = id.x / dpi + bounds.x;
    float y = id.y / dpi + bounds.y;

    tex[id.xy] = 0;

    for (uint i = 0; i < count; i++) {
        float dist = sqrt((x - particles[i].pos.x) * (x - particles[i].pos.x) + (y - particles[i].pos.y) * (y - particles[i].pos.y));
        tex[id.xy] += 1 - smoothstep(solidRadious, maxRadious, dist);
    }
}
